;; Define the load-path for the various custom modules

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

;; Prevent creation of backup Files
(setq make-backup-files nil)

;; ================================
;; Remove trailing whitespaces
;; ================================

(defun saving-clean-up-hook ()
  ; We do not want whitespace changes when editing diffs/patches
  (when (not (eq major-mode 'diff-mode))
    (delete-trailing-whitespace)))

(defun enable-clean-up-hook ()
  (interactive)
  (message "Whitespace clean up ON.")
  (add-hook 'before-save-hook #'saving-clean-up-hook))

(defun disable-clean-up-hook ()
  (interactive)
  (message "Whitespace clean up OFF.")
  (remove-hook 'before-save-hook #'saving-clean-up-hook))

(global-set-key [f5] #'enable-clean-up-hook)
(global-set-key [f6] #'disable-clean-up-hook)

;(add-hook 'before-save-hook #'saving-clean-up-hook)

;; ================================
;; Enable Line and Column Numbering
;; ================================

;; Show line-number in the mode line
(line-number-mode 1)

;; Show column-number in the mode line
(column-number-mode 1)

;; Show Line numbers in emacs :) like in vi
;;(require 'setnu)

;; Font Lock Mode for Syntax Highlighting
(font-lock-mode 1)

;; Enable visual feedback for 80 column
;(require 'fill-column-indicator)

(setq fci-rule-width 1)
(setq fci-rule-color "blue")
(setq fci-rule-use-dashes 1)
(setq fci-dash-pattern 0.5)

;; Set the 78 column limit
(setq set-fill-column 78)

;; ================================
;; Enable rename of current file and buffer
;; ================================

(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))

(global-set-key (kbd "C-c r")  'rename-file-and-buffer)

;; ============================
;; Key mappings
;; ============================

;; Set Key to Exit Emacs
;;(global-set-key [f5] 'kill-emacs)

;; Set Key to Open file in read only mode
(global-set-key [f3] 'find-file-read-only)

;; Set Key to Put file in read only mode
(global-set-key [f2] 'read-only-mode)

;; Set Key C-x p to go to the previous window
;; Opposite of C-x o
(defun select-previous-window ()
"Switch to the previous window"
(interactive)
(select-window (previous-window)))

(global-set-key (kbd "C-x p") 'select-previous-window)

;; highlight matches from searches
(setq isearch-highlight t)
(setq search-highlight t)
(setq-default transient-mark-mode t)

;; ================================
;; diff / patch editing settings
;; ================================

(add-hook 'diff-mode-hook 'whitespace-mode)

(add-to-list 'auto-mode-alist '("\\.patch\\'" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.diff\\'" . diff-mode))
(add-to-list 'auto-mode-alist '("patch-" . diff-mode))
